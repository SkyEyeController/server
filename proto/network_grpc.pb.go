// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: network.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelayNetworkClient is the client API for RelayNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayNetworkClient interface {
	// 接收端链事件触发后的消息，并转发至合适的目标节点
	RelayIDU(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error)
}

type relayNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayNetworkClient(cc grpc.ClientConnInterface) RelayNetworkClient {
	return &relayNetworkClient{cc}
}

func (c *relayNetworkClient) RelayIDU(ctx context.Context, in *RelayRequest, opts ...grpc.CallOption) (*RelayResponse, error) {
	out := new(RelayResponse)
	err := c.cc.Invoke(ctx, "/proto.RelayNetwork/RelayIDU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayNetworkServer is the server API for RelayNetwork service.
// All implementations must embed UnimplementedRelayNetworkServer
// for forward compatibility
type RelayNetworkServer interface {
	// 接收端链事件触发后的消息，并转发至合适的目标节点
	RelayIDU(context.Context, *RelayRequest) (*RelayResponse, error)
	mustEmbedUnimplementedRelayNetworkServer()
}

// UnimplementedRelayNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedRelayNetworkServer struct {
}

func (UnimplementedRelayNetworkServer) RelayIDU(context.Context, *RelayRequest) (*RelayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayIDU not implemented")
}
func (UnimplementedRelayNetworkServer) mustEmbedUnimplementedRelayNetworkServer() {}

// UnsafeRelayNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayNetworkServer will
// result in compilation errors.
type UnsafeRelayNetworkServer interface {
	mustEmbedUnimplementedRelayNetworkServer()
}

func RegisterRelayNetworkServer(s grpc.ServiceRegistrar, srv RelayNetworkServer) {
	s.RegisterService(&RelayNetwork_ServiceDesc, srv)
}

func _RelayNetwork_RelayIDU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayNetworkServer).RelayIDU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RelayNetwork/RelayIDU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayNetworkServer).RelayIDU(ctx, req.(*RelayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayNetwork_ServiceDesc is the grpc.ServiceDesc for RelayNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RelayNetwork",
	HandlerType: (*RelayNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayIDU",
			Handler:    _RelayNetwork_RelayIDU_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}

// EndpointChainEventListenerClient is the client API for EndpointChainEventListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndpointChainEventListenerClient interface {
	// 监听端链事件并在事件触发时处理
	ListenForEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type endpointChainEventListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewEndpointChainEventListenerClient(cc grpc.ClientConnInterface) EndpointChainEventListenerClient {
	return &endpointChainEventListenerClient{cc}
}

func (c *endpointChainEventListenerClient) ListenForEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/proto.EndpointChainEventListener/ListenForEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndpointChainEventListenerServer is the server API for EndpointChainEventListener service.
// All implementations must embed UnimplementedEndpointChainEventListenerServer
// for forward compatibility
type EndpointChainEventListenerServer interface {
	// 监听端链事件并在事件触发时处理
	ListenForEvents(context.Context, *EventRequest) (*EventResponse, error)
	mustEmbedUnimplementedEndpointChainEventListenerServer()
}

// UnimplementedEndpointChainEventListenerServer must be embedded to have forward compatible implementations.
type UnimplementedEndpointChainEventListenerServer struct {
}

func (UnimplementedEndpointChainEventListenerServer) ListenForEvents(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenForEvents not implemented")
}
func (UnimplementedEndpointChainEventListenerServer) mustEmbedUnimplementedEndpointChainEventListenerServer() {
}

// UnsafeEndpointChainEventListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndpointChainEventListenerServer will
// result in compilation errors.
type UnsafeEndpointChainEventListenerServer interface {
	mustEmbedUnimplementedEndpointChainEventListenerServer()
}

func RegisterEndpointChainEventListenerServer(s grpc.ServiceRegistrar, srv EndpointChainEventListenerServer) {
	s.RegisterService(&EndpointChainEventListener_ServiceDesc, srv)
}

func _EndpointChainEventListener_ListenForEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndpointChainEventListenerServer).ListenForEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EndpointChainEventListener/ListenForEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndpointChainEventListenerServer).ListenForEvents(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EndpointChainEventListener_ServiceDesc is the grpc.ServiceDesc for EndpointChainEventListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndpointChainEventListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EndpointChainEventListener",
	HandlerType: (*EndpointChainEventListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListenForEvents",
			Handler:    _EndpointChainEventListener_ListenForEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network.proto",
}
